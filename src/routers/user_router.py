import asyncpg
import logging
import pytz
import uuid
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from states.user_states import FSMTask
from database import db
from tasks.scheduler_manager import SchedulerManager
from datetime import datetime

router = Router()


def get_confirm_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                     callback_data="confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
            ]
        ]
    )
    return keyboard


def get_task_keyboard(task_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                    callback_data=f"complete_{task_id}"
                )
            ]
        ]
    )


@router.message(F.text == "/start")
async def start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_task - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/my_tasks - –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "/completed_tasks - –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    )


@router.message(F.text == "/add_task")
async def add_task(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(FSMTask.enter_task_text)


@router.message(FSMTask.enter_task_text)
async def process_task_text(message: Message, state: FSMContext):
    await state.update_data(task_text=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    await state.set_state(FSMTask.enter_due_date)


@router.message(FSMTask.enter_due_date)
async def process_due_date(
    message: Message,
    state: FSMContext,
    pool: asyncpg.Pool,
    scheduler_manager: SchedulerManager
):
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        # –ü–∞—Ä—Å–∏–º —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        naive_due_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        due_date = moscow_tz.localize(naive_due_date).astimezone(pytz.UTC)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    data = await state.get_data()
    await state.clear()

    job_id = f"task_{message.from_user.id}_{uuid.uuid4()}"

    try:
        await scheduler_manager.add_task(
            user_id=message.from_user.id,
            task_text=data['task_text'],
            due_date=due_date,
            job_id=job_id
        )

        await db.add_task_to_db(
            pool=pool,
            user_id=message.from_user.id,
            task_text=data['task_text'],
            due_date=due_date,  # –ø–µ—Ä–µ–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é
            job_id=job_id
        )

        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['task_text']}\n"
            f"‚è∞ –î–∞—Ç–∞: {due_date.astimezone(moscow_tz).strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_confirm_keyboard()
        )

    except Exception as e:
        logging.error(f"Error adding task: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!")


@router.message(F.text == "/my_tasks")
async def show_tasks(message: Message, pool: asyncpg.Pool):
    tasks = await db.get_active_user_tasks(pool, message.from_user.id)
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return

    response = ["–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:"]
    for task in tasks:
        task_msg = (
            f"üìå {task['task_text']}\n"
            f"‚è∞ {task['due_date'].astimezone(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')}\n"
            f"ID: {task['id']}"
        )
        await message.answer(
            task_msg,
            reply_markup=get_task_keyboard(task['id'])
        )

    await message.answer("‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")


@router.callback_query(F.data.startswith("complete_"))
async def complete_task(
    callback: CallbackQuery,
    pool: asyncpg.Pool,
    scheduler_manager: SchedulerManager
):
    task_id = int(callback.data.split("_")[1])
    task = await db.get_task_by_id(pool, task_id)

    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    if task['is_completed']:
        await callback.answer("–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        return

    try:
        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        await db.mark_task_completed(pool, task_id)

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ scheduler
        if task['job_id']:
            await scheduler_manager.remove_job(task['job_id'])

        await callback.message.edit_text(
            text=f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n{callback.message.text}",
            reply_markup=None
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"Error completing task: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!")


@router.callback_query(F.data == "confirm")
async def confirm_task(callback: CallbackQuery):
    await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")


@router.callback_query(F.data == "cancel")
async def cancel_task(
    callback: CallbackQuery,
    pool: asyncpg.Pool,
    scheduler_manager: SchedulerManager
):
    task_id = int(callback.message.text.split("ID: ")[-1])
    task = await db.get_task_by_id(pool, task_id)

    if task:
        await db.delete_task(pool, task_id)
        await scheduler_manager.remove_job(task['job_id'])
        await callback.message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")


@router.message(F.text == "/completed_tasks")
async def show_completed_tasks(message: Message, pool: asyncpg.Pool):
    tasks = await db.get_completed_user_tasks(pool, message.from_user.id)
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return

    response = ["–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:"]
    for task in tasks:
        response.append(
            f"‚úÖ {task['task_text']}\n"
            f"‚è∞ {task['due_date'].astimezone(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')}\n"
            f"ID: {task['id']}"
        )

    await message.answer("\n\n".join(response))
